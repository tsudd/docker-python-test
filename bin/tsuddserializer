#!usr/bin/python3
import argparse
from custom_packages.parser_factory.factory import ParserFactory

DEFAULT_FILE_NAME = "Converted-data"

SAME_EXTENSION_ERROR = "Inputted file and target extension are the same."

uargs = argparse.ArgumentParser(description="Custom serializer by tsudd.")
uargs.add_argument(
    'path',
    type=str,
    help='Provide path to file'
)
uargs.add_argument(
    'extension',
    type=str,
    default='json',
    help='Provide target extension to convert.'
)
uargs.add_argument(
    '-c',
    '--config',
    type=str,
    default=None,
    help='Optional parameter to provide conversion config'
)
uargs.add_argument(
    "-n",
    "--name",
    type=str,
    default=DEFAULT_FILE_NAME,
    help="Optional parameter to provide output file name"
)


def get_ext(filename: str):
    return filename.split('.')[-1]


def try_get_parser(ext: str):
    parser = None
    try:
        parser = ParserFactory.get_parser(ext)
    except ValueError:
        print("Wrong target extension. Please, use YAML, TOML or JSON.")
    finally:
        return parser


def parse_file(path: str):
    file_ext = get_ext(path)
    try:
        fp = open(path, "r")
    except FileNotFoundError:
        print(f"Error while opening {path}. There is no such file.")
        return

    parser = try_get_parser(file_ext)
    if parser is None:
        return

    obj = None
    try:
        obj = parser.load(fp)
    except Exception as ex:
        print(ex)

    fp.close()
    return obj


def serialize(obj, ext: str, file_name=DEFAULT_FILE_NAME):
    parser = try_get_parser(ext)
    if parser is None:
        return

    file = file_name + f".{ext}"
    fp = open(file, "w")
    try:
        parser.dump(obj, fp)
    except Exception as ex:
        print(ex)
        fp.close()
        return
    fp.close()


def make_conversion(path: str, ext: str, file_name=DEFAULT_FILE_NAME):
    if get_ext(path).lower() == ext.lower():
        print("Inputted file's format same as inputted target extension.")
        return
    obj = parse_file(path)
    if obj is None:
        return
    serialize(obj, ext, file_name)


np = uargs.parse_args()
print(f"Starting of conversion.\n Converting {np.path} file to {np.extension} extension.")
make_conversion(np.path, np.extension, np.name)
print("Ending of conversion.")


